/*
 * generated by Xtext 2.23.0
 */
package fr.n7.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import fr.n7.ide.contentassist.antlr.internal.InternalCSVToTableParser;
import fr.n7.services.CSVToTableGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class CSVToTableParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(CSVToTableGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, CSVToTableGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getDonneeAccess().getAlternatives(), "rule__Donnee__Alternatives");
			builder.put(grammarAccess.getDateAccess().getAlternatives(), "rule__Date__Alternatives");
			builder.put(grammarAccess.getValeurAccess().getAlternatives(), "rule__Valeur__Alternatives");
			builder.put(grammarAccess.getTableauAccess().getGroup(), "rule__Tableau__Group__0");
			builder.put(grammarAccess.getLigneNomAccess().getGroup(), "rule__LigneNom__Group__0");
			builder.put(grammarAccess.getLigneNomAccess().getGroup_1(), "rule__LigneNom__Group_1__0");
			builder.put(grammarAccess.getLigneValeurAccess().getGroup(), "rule__LigneValeur__Group__0");
			builder.put(grammarAccess.getLigneValeurAccess().getGroup_1(), "rule__LigneValeur__Group_1__0");
			builder.put(grammarAccess.getDateAccess().getGroup_0(), "rule__Date__Group_0__0");
			builder.put(grammarAccess.getDateAccess().getGroup_1(), "rule__Date__Group_1__0");
			builder.put(grammarAccess.getFlottantAccess().getGroup(), "rule__Flottant__Group__0");
			builder.put(grammarAccess.getFlottantAccess().getGroup_1(), "rule__Flottant__Group_1__0");
			builder.put(grammarAccess.getTableauAccess().getLinesAssignment_1(), "rule__Tableau__LinesAssignment_1");
			builder.put(grammarAccess.getLigneNomAccess().getColonnesAssignment_0(), "rule__LigneNom__ColonnesAssignment_0");
			builder.put(grammarAccess.getLigneNomAccess().getColonnesAssignment_1_1(), "rule__LigneNom__ColonnesAssignment_1_1");
			builder.put(grammarAccess.getColonneIDAccess().getNomAssignment(), "rule__ColonneID__NomAssignment");
			builder.put(grammarAccess.getLigneValeurAccess().getValeursAssignment_0(), "rule__LigneValeur__ValeursAssignment_0");
			builder.put(grammarAccess.getLigneValeurAccess().getValeursAssignment_1_1(), "rule__LigneValeur__ValeursAssignment_1_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private CSVToTableGrammarAccess grammarAccess;

	@Override
	protected InternalCSVToTableParser createParser() {
		InternalCSVToTableParser result = new InternalCSVToTableParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public CSVToTableGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(CSVToTableGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
