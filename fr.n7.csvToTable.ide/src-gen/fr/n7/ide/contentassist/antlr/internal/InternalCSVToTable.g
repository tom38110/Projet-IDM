/*
 * generated by Xtext 2.23.0
 */
grammar InternalCSVToTable;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package fr.n7.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package fr.n7.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import fr.n7.services.CSVToTableGrammarAccess;

}
@parser::members {
	private CSVToTableGrammarAccess grammarAccess;

	public void setGrammarAccess(CSVToTableGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleTableau
entryRuleTableau
:
{ before(grammarAccess.getTableauRule()); }
	 ruleTableau
{ after(grammarAccess.getTableauRule()); } 
	 EOF 
;

// Rule Tableau
ruleTableau 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTableauAccess().getGroup()); }
		(rule__Tableau__Group__0)
		{ after(grammarAccess.getTableauAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLigneNom
entryRuleLigneNom
:
{ before(grammarAccess.getLigneNomRule()); }
	 ruleLigneNom
{ after(grammarAccess.getLigneNomRule()); } 
	 EOF 
;

// Rule LigneNom
ruleLigneNom 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLigneNomAccess().getGroup()); }
		(rule__LigneNom__Group__0)
		{ after(grammarAccess.getLigneNomAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLigneValeur
entryRuleLigneValeur
:
{ before(grammarAccess.getLigneValeurRule()); }
	 ruleLigneValeur
{ after(grammarAccess.getLigneValeurRule()); } 
	 EOF 
;

// Rule LigneValeur
ruleLigneValeur 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLigneValeurAccess().getGroup()); }
		(rule__LigneValeur__Group__0)
		{ after(grammarAccess.getLigneValeurAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDonnee
entryRuleDonnee
:
{ before(grammarAccess.getDonneeRule()); }
	 ruleDonnee
{ after(grammarAccess.getDonneeRule()); } 
	 EOF 
;

// Rule Donnee
ruleDonnee 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDonneeAccess().getAlternatives()); }
		(rule__Donnee__Alternatives)
		{ after(grammarAccess.getDonneeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDate
entryRuleDate
:
{ before(grammarAccess.getDateRule()); }
	 ruleDate
{ after(grammarAccess.getDateRule()); } 
	 EOF 
;

// Rule Date
ruleDate 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDateAccess().getAlternatives()); }
		(rule__Date__Alternatives)
		{ after(grammarAccess.getDateAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleValeur
entryRuleValeur
:
{ before(grammarAccess.getValeurRule()); }
	 ruleValeur
{ after(grammarAccess.getValeurRule()); } 
	 EOF 
;

// Rule Valeur
ruleValeur 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getValeurAccess().getAlternatives()); }
		(rule__Valeur__Alternatives)
		{ after(grammarAccess.getValeurAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFlottant
entryRuleFlottant
:
{ before(grammarAccess.getFlottantRule()); }
	 ruleFlottant
{ after(grammarAccess.getFlottantRule()); } 
	 EOF 
;

// Rule Flottant
ruleFlottant 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFlottantAccess().getGroup()); }
		(rule__Flottant__Group__0)
		{ after(grammarAccess.getFlottantAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Donnee__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDonneeAccess().getValeurParserRuleCall_0()); }
		ruleValeur
		{ after(grammarAccess.getDonneeAccess().getValeurParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getDonneeAccess().getDateParserRuleCall_1()); }
		ruleDate
		{ after(grammarAccess.getDonneeAccess().getDateParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Date__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDateAccess().getGroup_0()); }
		(rule__Date__Group_0__0)
		{ after(grammarAccess.getDateAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getDateAccess().getGroup_1()); }
		(rule__Date__Group_1__0)
		{ after(grammarAccess.getDateAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Valeur__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValeurAccess().getIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getValeurAccess().getIDTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getValeurAccess().getFlottantParserRuleCall_1()); }
		ruleFlottant
		{ after(grammarAccess.getValeurAccess().getFlottantParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tableau__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Tableau__Group__0__Impl
	rule__Tableau__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Tableau__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableauAccess().getLigneNomParserRuleCall_0()); }
	ruleLigneNom
	{ after(grammarAccess.getTableauAccess().getLigneNomParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tableau__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Tableau__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Tableau__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableauAccess().getLinesAssignment_1()); }
	(rule__Tableau__LinesAssignment_1)
	{ after(grammarAccess.getTableauAccess().getLinesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LigneNom__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LigneNom__Group__0__Impl
	rule__LigneNom__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LigneNom__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLigneNomAccess().getColonnesAssignment_0()); }
	(rule__LigneNom__ColonnesAssignment_0)
	{ after(grammarAccess.getLigneNomAccess().getColonnesAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LigneNom__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LigneNom__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LigneNom__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLigneNomAccess().getGroup_1()); }
	(rule__LigneNom__Group_1__0)*
	{ after(grammarAccess.getLigneNomAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LigneNom__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LigneNom__Group_1__0__Impl
	rule__LigneNom__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LigneNom__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLigneNomAccess().getCommaKeyword_1_0()); }
	','
	{ after(grammarAccess.getLigneNomAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LigneNom__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LigneNom__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LigneNom__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLigneNomAccess().getColonnesAssignment_1_1()); }
	(rule__LigneNom__ColonnesAssignment_1_1)
	{ after(grammarAccess.getLigneNomAccess().getColonnesAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LigneValeur__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LigneValeur__Group__0__Impl
	rule__LigneValeur__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LigneValeur__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLigneValeurAccess().getValeursAssignment_0()); }
	(rule__LigneValeur__ValeursAssignment_0)
	{ after(grammarAccess.getLigneValeurAccess().getValeursAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LigneValeur__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LigneValeur__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LigneValeur__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLigneValeurAccess().getGroup_1()); }
	(rule__LigneValeur__Group_1__0)*
	{ after(grammarAccess.getLigneValeurAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LigneValeur__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LigneValeur__Group_1__0__Impl
	rule__LigneValeur__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LigneValeur__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLigneValeurAccess().getCommaKeyword_1_0()); }
	','
	{ after(grammarAccess.getLigneValeurAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LigneValeur__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LigneValeur__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LigneValeur__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLigneValeurAccess().getValeursAssignment_1_1()); }
	(rule__LigneValeur__ValeursAssignment_1_1)
	{ after(grammarAccess.getLigneValeurAccess().getValeursAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Date__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Date__Group_0__0__Impl
	rule__Date__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Date__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDateAccess().getIDTerminalRuleCall_0_0()); }
	RULE_ID
	{ after(grammarAccess.getDateAccess().getIDTerminalRuleCall_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Date__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Date__Group_0__1__Impl
	rule__Date__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Date__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDateAccess().getHyphenMinusKeyword_0_1()); }
	'-'
	{ after(grammarAccess.getDateAccess().getHyphenMinusKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Date__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Date__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Date__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDateAccess().getIDTerminalRuleCall_0_2()); }
	RULE_ID
	{ after(grammarAccess.getDateAccess().getIDTerminalRuleCall_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Date__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Date__Group_1__0__Impl
	rule__Date__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Date__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDateAccess().getIDTerminalRuleCall_1_0()); }
	RULE_ID
	{ after(grammarAccess.getDateAccess().getIDTerminalRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Date__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Date__Group_1__1__Impl
	rule__Date__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Date__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDateAccess().getSolidusKeyword_1_1()); }
	'/'
	{ after(grammarAccess.getDateAccess().getSolidusKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Date__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Date__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Date__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDateAccess().getIDTerminalRuleCall_1_2()); }
	RULE_ID
	{ after(grammarAccess.getDateAccess().getIDTerminalRuleCall_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Flottant__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Flottant__Group__0__Impl
	rule__Flottant__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Flottant__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFlottantAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
	{ after(grammarAccess.getFlottantAccess().getIDTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Flottant__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Flottant__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Flottant__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getFlottantAccess().getGroup_1()); }
		(rule__Flottant__Group_1__0)
		{ after(grammarAccess.getFlottantAccess().getGroup_1()); }
	)
	(
		{ before(grammarAccess.getFlottantAccess().getGroup_1()); }
		(rule__Flottant__Group_1__0)*
		{ after(grammarAccess.getFlottantAccess().getGroup_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Flottant__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Flottant__Group_1__0__Impl
	rule__Flottant__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Flottant__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFlottantAccess().getFullStopKeyword_1_0()); }
	'.'
	{ after(grammarAccess.getFlottantAccess().getFullStopKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Flottant__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Flottant__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Flottant__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFlottantAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
	{ after(grammarAccess.getFlottantAccess().getIDTerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Tableau__LinesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTableauAccess().getLinesLigneValeurParserRuleCall_1_0()); }
		ruleLigneValeur
		{ after(grammarAccess.getTableauAccess().getLinesLigneValeurParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LigneNom__ColonnesAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLigneNomAccess().getColonnesIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getLigneNomAccess().getColonnesIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LigneNom__ColonnesAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLigneNomAccess().getColonnesIDTerminalRuleCall_1_1_0()); }
		RULE_ID
		{ after(grammarAccess.getLigneNomAccess().getColonnesIDTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LigneValeur__ValeursAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLigneValeurAccess().getValeursDonneeParserRuleCall_0_0()); }
		ruleDonnee
		{ after(grammarAccess.getLigneValeurAccess().getValeursDonneeParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LigneValeur__ValeursAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLigneValeurAccess().getValeursDonneeParserRuleCall_1_1_0()); }
		ruleDonnee
		{ after(grammarAccess.getLigneValeurAccess().getValeursDonneeParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
