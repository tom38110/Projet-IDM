/*
 * generated by Xtext 2.23.0
 */
package fr.n7.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class AlgorithmeXtextGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class AlgorithmeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.AlgorithmeXtext.Algorithme");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAlgorithmeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNomAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNomNomParserRuleCall_1_0 = (RuleCall)cNomAssignment_1.eContents().get(0);
		private final Assignment cAlgorithmeElementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAlgorithmeElementAlgorithmeElementParserRuleCall_2_0 = (RuleCall)cAlgorithmeElementAssignment_2.eContents().get(0);
		
		//Algorithme:
		//	'Algorithme' nom=Nom
		//	algorithmeElement+=AlgorithmeElement+;
		@Override public ParserRule getRule() { return rule; }
		
		//'Algorithme' nom=Nom algorithmeElement+=AlgorithmeElement+
		public Group getGroup() { return cGroup; }
		
		//'Algorithme'
		public Keyword getAlgorithmeKeyword_0() { return cAlgorithmeKeyword_0; }
		
		//nom=Nom
		public Assignment getNomAssignment_1() { return cNomAssignment_1; }
		
		//Nom
		public RuleCall getNomNomParserRuleCall_1_0() { return cNomNomParserRuleCall_1_0; }
		
		//algorithmeElement+=AlgorithmeElement+
		public Assignment getAlgorithmeElementAssignment_2() { return cAlgorithmeElementAssignment_2; }
		
		//AlgorithmeElement
		public RuleCall getAlgorithmeElementAlgorithmeElementParserRuleCall_2_0() { return cAlgorithmeElementAlgorithmeElementParserRuleCall_2_0; }
	}
	public class NomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.AlgorithmeXtext.Nom");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Nom:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class AlgorithmeElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.AlgorithmeXtext.AlgorithmeElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRessourceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEntreeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSortieParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//AlgorithmeElement:
		//	Ressource | Entree | Sortie;
		@Override public ParserRule getRule() { return rule; }
		
		//Ressource | Entree | Sortie
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Ressource
		public RuleCall getRessourceParserRuleCall_0() { return cRessourceParserRuleCall_0; }
		
		//Entree
		public RuleCall getEntreeParserRuleCall_1() { return cEntreeParserRuleCall_1; }
		
		//Sortie
		public RuleCall getSortieParserRuleCall_2() { return cSortieParserRuleCall_2; }
	}
	public class RessourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.AlgorithmeXtext.Ressource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRessourceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNomAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNomCheminParserRuleCall_1_0 = (RuleCall)cNomAssignment_1.eContents().get(0);
		private final Keyword cDeTypeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeAlgoParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//Ressource:
		//	'Ressource :' nom=Chemin 'de type' type=TypeAlgo;
		@Override public ParserRule getRule() { return rule; }
		
		//'Ressource :' nom=Chemin 'de type' type=TypeAlgo
		public Group getGroup() { return cGroup; }
		
		//'Ressource :'
		public Keyword getRessourceKeyword_0() { return cRessourceKeyword_0; }
		
		//nom=Chemin
		public Assignment getNomAssignment_1() { return cNomAssignment_1; }
		
		//Chemin
		public RuleCall getNomCheminParserRuleCall_1_0() { return cNomCheminParserRuleCall_1_0; }
		
		//'de type'
		public Keyword getDeTypeKeyword_2() { return cDeTypeKeyword_2; }
		
		//type=TypeAlgo
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//TypeAlgo
		public RuleCall getTypeTypeAlgoParserRuleCall_3_0() { return cTypeTypeAlgoParserRuleCall_3_0; }
	}
	public class CheminElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.AlgorithmeXtext.Chemin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSolidusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//Chemin:
		//	('/' ID ('.' ID)*)+;
		@Override public ParserRule getRule() { return rule; }
		
		//('/' ID ('.' ID)*)+
		public Group getGroup() { return cGroup; }
		
		//'/'
		public Keyword getSolidusKeyword_0() { return cSolidusKeyword_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
		
		//('.' ID)*
		public Group getGroup_2() { return cGroup_2; }
		
		//'.'
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_2_1() { return cIDTerminalRuleCall_2_1; }
	}
	public class SortieElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.AlgorithmeXtext.Sortie");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPortSortieKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNomAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNomNomParserRuleCall_1_0 = (RuleCall)cNomAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cAssociRSultatKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cValeurAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cValeurResultatParserRuleCall_2_0_1_0 = (RuleCall)cValeurAssignment_2_0_1.eContents().get(0);
		private final Keyword cAssociAuRetourDeLaFonctionKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		
		//Sortie:
		//	'Port sortie' nom=Nom ('associé à résultat' valeur=Resultat | 'associé au retour de la fonction');
		@Override public ParserRule getRule() { return rule; }
		
		//'Port sortie' nom=Nom ('associé à résultat' valeur=Resultat | 'associé au retour de la fonction')
		public Group getGroup() { return cGroup; }
		
		//'Port sortie'
		public Keyword getPortSortieKeyword_0() { return cPortSortieKeyword_0; }
		
		//nom=Nom
		public Assignment getNomAssignment_1() { return cNomAssignment_1; }
		
		//Nom
		public RuleCall getNomNomParserRuleCall_1_0() { return cNomNomParserRuleCall_1_0; }
		
		//('associé à résultat' valeur=Resultat | 'associé au retour de la fonction')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'associé à résultat' valeur=Resultat
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//'associé à résultat'
		public Keyword getAssociRSultatKeyword_2_0_0() { return cAssociRSultatKeyword_2_0_0; }
		
		//valeur=Resultat
		public Assignment getValeurAssignment_2_0_1() { return cValeurAssignment_2_0_1; }
		
		//Resultat
		public RuleCall getValeurResultatParserRuleCall_2_0_1_0() { return cValeurResultatParserRuleCall_2_0_1_0; }
		
		//'associé au retour de la fonction'
		public Keyword getAssociAuRetourDeLaFonctionKeyword_2_1() { return cAssociAuRetourDeLaFonctionKeyword_2_1; }
	}
	public class ResultatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.AlgorithmeXtext.Resultat");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Resultat:
		//	ID;
		@Override public ParserRule getRule() { return rule; }
		
		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}
	public class EntreeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.AlgorithmeXtext.Entree");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPortEntrEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNomAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNomNomParserRuleCall_1_0 = (RuleCall)cNomAssignment_1.eContents().get(0);
		private final Keyword cAssociArgumentKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArgumentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArgumentArgumentParserRuleCall_3_0 = (RuleCall)cArgumentAssignment_3.eContents().get(0);
		
		//Entree:
		//	'Port entrée' nom=Nom 'associé à argument' argument=Argument;
		@Override public ParserRule getRule() { return rule; }
		
		//'Port entrée' nom=Nom 'associé à argument' argument=Argument
		public Group getGroup() { return cGroup; }
		
		//'Port entrée'
		public Keyword getPortEntrEKeyword_0() { return cPortEntrEKeyword_0; }
		
		//nom=Nom
		public Assignment getNomAssignment_1() { return cNomAssignment_1; }
		
		//Nom
		public RuleCall getNomNomParserRuleCall_1_0() { return cNomNomParserRuleCall_1_0; }
		
		//'associé à argument'
		public Keyword getAssociArgumentKeyword_2() { return cAssociArgumentKeyword_2; }
		
		//argument=Argument
		public Assignment getArgumentAssignment_3() { return cArgumentAssignment_3; }
		
		//Argument
		public RuleCall getArgumentArgumentParserRuleCall_3_0() { return cArgumentArgumentParserRuleCall_3_0; }
	}
	public class ArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.AlgorithmeXtext.Argument");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Argument:
		//	ID | INT;
		@Override public ParserRule getRule() { return rule; }
		
		//ID | INT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class TypeAlgoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.AlgorithmeXtext.TypeAlgo");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCalculParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cScriptParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TypeAlgo:
		//	Calcul | Script;
		@Override public ParserRule getRule() { return rule; }
		
		//Calcul | Script
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Calcul
		public RuleCall getCalculParserRuleCall_0() { return cCalculParserRuleCall_0; }
		
		//Script
		public RuleCall getScriptParserRuleCall_1() { return cScriptParserRuleCall_1; }
	}
	public class ScriptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.AlgorithmeXtext.Script");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cSousProgrammeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cProgrammeParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Script:
		//	ID ', sous-programme' Programme;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ', sous-programme' Programme
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//', sous-programme'
		public Keyword getSousProgrammeKeyword_1() { return cSousProgrammeKeyword_1; }
		
		//Programme
		public RuleCall getProgrammeParserRuleCall_2() { return cProgrammeParserRuleCall_2; }
	}
	public class ProgrammeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.AlgorithmeXtext.Programme");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Programme:
		//	ID;
		@Override public ParserRule getRule() { return rule; }
		
		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}
	public class CalculElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.AlgorithmeXtext.Calcul");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Calcul:
		//	ID+;
		@Override public ParserRule getRule() { return rule; }
		
		//ID+
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}
	
	
	private final AlgorithmeElements pAlgorithme;
	private final NomElements pNom;
	private final AlgorithmeElementElements pAlgorithmeElement;
	private final RessourceElements pRessource;
	private final CheminElements pChemin;
	private final SortieElements pSortie;
	private final ResultatElements pResultat;
	private final EntreeElements pEntree;
	private final ArgumentElements pArgument;
	private final TypeAlgoElements pTypeAlgo;
	private final ScriptElements pScript;
	private final ProgrammeElements pProgramme;
	private final CalculElements pCalcul;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public AlgorithmeXtextGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pAlgorithme = new AlgorithmeElements();
		this.pNom = new NomElements();
		this.pAlgorithmeElement = new AlgorithmeElementElements();
		this.pRessource = new RessourceElements();
		this.pChemin = new CheminElements();
		this.pSortie = new SortieElements();
		this.pResultat = new ResultatElements();
		this.pEntree = new EntreeElements();
		this.pArgument = new ArgumentElements();
		this.pTypeAlgo = new TypeAlgoElements();
		this.pScript = new ScriptElements();
		this.pProgramme = new ProgrammeElements();
		this.pCalcul = new CalculElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.n7.AlgorithmeXtext".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Algorithme:
	//	'Algorithme' nom=Nom
	//	algorithmeElement+=AlgorithmeElement+;
	public AlgorithmeElements getAlgorithmeAccess() {
		return pAlgorithme;
	}
	
	public ParserRule getAlgorithmeRule() {
		return getAlgorithmeAccess().getRule();
	}
	
	//Nom:
	//	ID ('.' ID)*;
	public NomElements getNomAccess() {
		return pNom;
	}
	
	public ParserRule getNomRule() {
		return getNomAccess().getRule();
	}
	
	//AlgorithmeElement:
	//	Ressource | Entree | Sortie;
	public AlgorithmeElementElements getAlgorithmeElementAccess() {
		return pAlgorithmeElement;
	}
	
	public ParserRule getAlgorithmeElementRule() {
		return getAlgorithmeElementAccess().getRule();
	}
	
	//Ressource:
	//	'Ressource :' nom=Chemin 'de type' type=TypeAlgo;
	public RessourceElements getRessourceAccess() {
		return pRessource;
	}
	
	public ParserRule getRessourceRule() {
		return getRessourceAccess().getRule();
	}
	
	//Chemin:
	//	('/' ID ('.' ID)*)+;
	public CheminElements getCheminAccess() {
		return pChemin;
	}
	
	public ParserRule getCheminRule() {
		return getCheminAccess().getRule();
	}
	
	//Sortie:
	//	'Port sortie' nom=Nom ('associé à résultat' valeur=Resultat | 'associé au retour de la fonction');
	public SortieElements getSortieAccess() {
		return pSortie;
	}
	
	public ParserRule getSortieRule() {
		return getSortieAccess().getRule();
	}
	
	//Resultat:
	//	ID;
	public ResultatElements getResultatAccess() {
		return pResultat;
	}
	
	public ParserRule getResultatRule() {
		return getResultatAccess().getRule();
	}
	
	//Entree:
	//	'Port entrée' nom=Nom 'associé à argument' argument=Argument;
	public EntreeElements getEntreeAccess() {
		return pEntree;
	}
	
	public ParserRule getEntreeRule() {
		return getEntreeAccess().getRule();
	}
	
	//Argument:
	//	ID | INT;
	public ArgumentElements getArgumentAccess() {
		return pArgument;
	}
	
	public ParserRule getArgumentRule() {
		return getArgumentAccess().getRule();
	}
	
	//TypeAlgo:
	//	Calcul | Script;
	public TypeAlgoElements getTypeAlgoAccess() {
		return pTypeAlgo;
	}
	
	public ParserRule getTypeAlgoRule() {
		return getTypeAlgoAccess().getRule();
	}
	
	//Script:
	//	ID ', sous-programme' Programme;
	public ScriptElements getScriptAccess() {
		return pScript;
	}
	
	public ParserRule getScriptRule() {
		return getScriptAccess().getRule();
	}
	
	//Programme:
	//	ID;
	public ProgrammeElements getProgrammeAccess() {
		return pProgramme;
	}
	
	public ParserRule getProgrammeRule() {
		return getProgrammeAccess().getRule();
	}
	
	//Calcul:
	//	ID+;
	public CalculElements getCalculAccess() {
		return pCalcul;
	}
	
	public ParserRule getCalculRule() {
		return getCalculAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
