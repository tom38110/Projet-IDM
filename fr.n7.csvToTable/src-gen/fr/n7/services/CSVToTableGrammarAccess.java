/*
 * generated by Xtext 2.23.0
 */
package fr.n7.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class CSVToTableGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class TableauElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.CSVToTable.Tableau");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLigneNomParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cLinesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLinesLigneValeurParserRuleCall_1_0 = (RuleCall)cLinesAssignment_1.eContents().get(0);
		
		//Tableau:
		//	LigneNom
		//	lines+=LigneValeur;
		@Override public ParserRule getRule() { return rule; }
		
		//LigneNom lines+=LigneValeur
		public Group getGroup() { return cGroup; }
		
		//LigneNom
		public RuleCall getLigneNomParserRuleCall_0() { return cLigneNomParserRuleCall_0; }
		
		//lines+=LigneValeur
		public Assignment getLinesAssignment_1() { return cLinesAssignment_1; }
		
		//LigneValeur
		public RuleCall getLinesLigneValeurParserRuleCall_1_0() { return cLinesLigneValeurParserRuleCall_1_0; }
	}
	public class LigneNomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.CSVToTable.LigneNom");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cColonnesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cColonnesIDTerminalRuleCall_0_0 = (RuleCall)cColonnesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cColonnesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cColonnesIDTerminalRuleCall_1_1_0 = (RuleCall)cColonnesAssignment_1_1.eContents().get(0);
		
		//LigneNom:
		//	colonnes+=ID (',' colonnes+=ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//colonnes+=ID (',' colonnes+=ID)*
		public Group getGroup() { return cGroup; }
		
		//colonnes+=ID
		public Assignment getColonnesAssignment_0() { return cColonnesAssignment_0; }
		
		//ID
		public RuleCall getColonnesIDTerminalRuleCall_0_0() { return cColonnesIDTerminalRuleCall_0_0; }
		
		//(',' colonnes+=ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//colonnes+=ID
		public Assignment getColonnesAssignment_1_1() { return cColonnesAssignment_1_1; }
		
		//ID
		public RuleCall getColonnesIDTerminalRuleCall_1_1_0() { return cColonnesIDTerminalRuleCall_1_1_0; }
	}
	public class ColonneIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.CSVToTable.ColonneID");
		private final Assignment cNomAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNomIDTerminalRuleCall_0 = (RuleCall)cNomAssignment.eContents().get(0);
		
		//ColonneID:
		//	nom=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//nom=ID
		public Assignment getNomAssignment() { return cNomAssignment; }
		
		//ID
		public RuleCall getNomIDTerminalRuleCall_0() { return cNomIDTerminalRuleCall_0; }
	}
	public class LigneValeurElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.CSVToTable.LigneValeur");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValeursAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValeursDonneeParserRuleCall_0_0 = (RuleCall)cValeursAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValeursAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValeursDonneeParserRuleCall_1_1_0 = (RuleCall)cValeursAssignment_1_1.eContents().get(0);
		
		//LigneValeur:
		//	valeurs+=Donnee (',' valeurs+=Donnee)*;
		@Override public ParserRule getRule() { return rule; }
		
		//valeurs+=Donnee (',' valeurs+=Donnee)*
		public Group getGroup() { return cGroup; }
		
		//valeurs+=Donnee
		public Assignment getValeursAssignment_0() { return cValeursAssignment_0; }
		
		//Donnee
		public RuleCall getValeursDonneeParserRuleCall_0_0() { return cValeursDonneeParserRuleCall_0_0; }
		
		//(',' valeurs+=Donnee)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//valeurs+=Donnee
		public Assignment getValeursAssignment_1_1() { return cValeursAssignment_1_1; }
		
		//Donnee
		public RuleCall getValeursDonneeParserRuleCall_1_1_0() { return cValeursDonneeParserRuleCall_1_1_0; }
	}
	public class DonneeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.CSVToTable.Donnee");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cValeurParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDateParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Donnee:
		//	Valeur | Date;
		@Override public ParserRule getRule() { return rule; }
		
		//Valeur | Date
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Valeur
		public RuleCall getValeurParserRuleCall_0() { return cValeurParserRuleCall_0; }
		
		//Date
		public RuleCall getDateParserRuleCall_1() { return cDateParserRuleCall_1; }
	}
	public class DateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.CSVToTable.Date");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//Date:
		//	ID '-' ID | ID '/' ID;
		@Override public ParserRule getRule() { return rule; }
		
		//ID '-' ID | ID '/' ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID '-' ID
		public Group getGroup_0() { return cGroup_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0_0() { return cIDTerminalRuleCall_0_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0_1() { return cHyphenMinusKeyword_0_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0_2() { return cIDTerminalRuleCall_0_2; }
		
		//ID '/' ID
		public Group getGroup_1() { return cGroup_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_0() { return cIDTerminalRuleCall_1_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1_1() { return cSolidusKeyword_1_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_2() { return cIDTerminalRuleCall_1_2; }
	}
	public class ValeurElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.CSVToTable.Valeur");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFlottantParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Valeur:
		//	ID | Flottant;
		@Override public ParserRule getRule() { return rule; }
		
		//ID | Flottant
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//Flottant
		public RuleCall getFlottantParserRuleCall_1() { return cFlottantParserRuleCall_1; }
	}
	public class FlottantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.CSVToTable.Flottant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Flottant:
		//	ID ('.' ID)+;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)+
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)+
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	private final TableauElements pTableau;
	private final LigneNomElements pLigneNom;
	private final ColonneIDElements pColonneID;
	private final LigneValeurElements pLigneValeur;
	private final DonneeElements pDonnee;
	private final DateElements pDate;
	private final ValeurElements pValeur;
	private final FlottantElements pFlottant;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public CSVToTableGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pTableau = new TableauElements();
		this.pLigneNom = new LigneNomElements();
		this.pColonneID = new ColonneIDElements();
		this.pLigneValeur = new LigneValeurElements();
		this.pDonnee = new DonneeElements();
		this.pDate = new DateElements();
		this.pValeur = new ValeurElements();
		this.pFlottant = new FlottantElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.n7.CSVToTable".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Tableau:
	//	LigneNom
	//	lines+=LigneValeur;
	public TableauElements getTableauAccess() {
		return pTableau;
	}
	
	public ParserRule getTableauRule() {
		return getTableauAccess().getRule();
	}
	
	//LigneNom:
	//	colonnes+=ID (',' colonnes+=ID)*;
	public LigneNomElements getLigneNomAccess() {
		return pLigneNom;
	}
	
	public ParserRule getLigneNomRule() {
		return getLigneNomAccess().getRule();
	}
	
	//ColonneID:
	//	nom=ID;
	public ColonneIDElements getColonneIDAccess() {
		return pColonneID;
	}
	
	public ParserRule getColonneIDRule() {
		return getColonneIDAccess().getRule();
	}
	
	//LigneValeur:
	//	valeurs+=Donnee (',' valeurs+=Donnee)*;
	public LigneValeurElements getLigneValeurAccess() {
		return pLigneValeur;
	}
	
	public ParserRule getLigneValeurRule() {
		return getLigneValeurAccess().getRule();
	}
	
	//Donnee:
	//	Valeur | Date;
	public DonneeElements getDonneeAccess() {
		return pDonnee;
	}
	
	public ParserRule getDonneeRule() {
		return getDonneeAccess().getRule();
	}
	
	//Date:
	//	ID '-' ID | ID '/' ID;
	public DateElements getDateAccess() {
		return pDate;
	}
	
	public ParserRule getDateRule() {
		return getDateAccess().getRule();
	}
	
	//Valeur:
	//	ID | Flottant;
	public ValeurElements getValeurAccess() {
		return pValeur;
	}
	
	public ParserRule getValeurRule() {
		return getValeurAccess().getRule();
	}
	
	//Flottant:
	//	ID ('.' ID)+;
	public FlottantElements getFlottantAccess() {
		return pFlottant;
	}
	
	public ParserRule getFlottantRule() {
		return getFlottantAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
