/**
 * generated by Xtext 2.23.0
 */
package fr.n7.cSVToTable.impl;

import fr.n7.cSVToTable.CSVToTablePackage;
import fr.n7.cSVToTable.LigneNom;
import fr.n7.cSVToTable.LigneValeur;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Ligne Nom</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link fr.n7.cSVToTable.impl.LigneNomImpl#getLines <em>Lines</em>}</li>
 *   <li>{@link fr.n7.cSVToTable.impl.LigneNomImpl#getColonnes <em>Colonnes</em>}</li>
 * </ul>
 *
 * @generated
 */
public class LigneNomImpl extends TableauImpl implements LigneNom
{
  /**
   * The cached value of the '{@link #getLines() <em>Lines</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLines()
   * @generated
   * @ordered
   */
  protected EList<LigneValeur> lines;

  /**
   * The cached value of the '{@link #getColonnes() <em>Colonnes</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getColonnes()
   * @generated
   * @ordered
   */
  protected EList<String> colonnes;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LigneNomImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CSVToTablePackage.Literals.LIGNE_NOM;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<LigneValeur> getLines()
  {
    if (lines == null)
    {
      lines = new EObjectContainmentEList<LigneValeur>(LigneValeur.class, this, CSVToTablePackage.LIGNE_NOM__LINES);
    }
    return lines;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getColonnes()
  {
    if (colonnes == null)
    {
      colonnes = new EDataTypeEList<String>(String.class, this, CSVToTablePackage.LIGNE_NOM__COLONNES);
    }
    return colonnes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case CSVToTablePackage.LIGNE_NOM__LINES:
        return ((InternalEList<?>)getLines()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CSVToTablePackage.LIGNE_NOM__LINES:
        return getLines();
      case CSVToTablePackage.LIGNE_NOM__COLONNES:
        return getColonnes();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CSVToTablePackage.LIGNE_NOM__LINES:
        getLines().clear();
        getLines().addAll((Collection<? extends LigneValeur>)newValue);
        return;
      case CSVToTablePackage.LIGNE_NOM__COLONNES:
        getColonnes().clear();
        getColonnes().addAll((Collection<? extends String>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CSVToTablePackage.LIGNE_NOM__LINES:
        getLines().clear();
        return;
      case CSVToTablePackage.LIGNE_NOM__COLONNES:
        getColonnes().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CSVToTablePackage.LIGNE_NOM__LINES:
        return lines != null && !lines.isEmpty();
      case CSVToTablePackage.LIGNE_NOM__COLONNES:
        return colonnes != null && !colonnes.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (colonnes: ");
    result.append(colonnes);
    result.append(')');
    return result.toString();
  }

} //LigneNomImpl
